{"version":3,"sources":["GetData.js","PostRegister.js","App.js","serviceWorker.js","index.js"],"names":["Component","PostRegister","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","data","state","console","log","axios","post","then","response","catch","error","handleInputChange","setState","defineProperty","target","name","value","username","password","message","_this$state","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","onClick","App","src_PostRegister","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAEsBA,oCCmEPC,cAjEX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQVQ,aAAe,SAACC,GACZA,EAAMC,iBACN,IAAMC,EAAOV,EAAKW,MAClBC,QAAQC,IAAIH,GAEZI,IAAMC,KAAK,8EAA+EL,GACrFM,KAAK,SAAAC,GACFL,QAAQC,IAAII,KAEfC,MAAM,SAAAC,GACHP,QAAQC,IAAIM,MAnBNnB,EAuBlBoB,kBAAoB,SAACZ,GACjBA,EAAMC,iBACNT,EAAKqB,SAALpB,OAAAqB,EAAA,EAAArB,CAAA,GACKO,EAAMe,OAAOC,KAAQhB,EAAMe,OAAOE,SAxBvCzB,EAAKW,MAAQ,CACTe,SAAW,GACXC,SAAW,GACXC,QAAU,IALA5B,wEAgCV,IAAA6B,EACyB1B,KAAKQ,MAA3Be,EADHG,EACGH,SAAUC,EADbE,EACaF,SACjB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YACZH,EAAAC,EAAAC,cAAA,sBAIAF,EAAAC,EAAAC,cAAA,QAAME,SAAU/B,KAAKI,cACjBuB,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,SAAOG,KAAO,OAAOC,YAAc,WAAWX,MAASC,EAAUF,KAAO,WAAWa,SAAUlC,KAAKiB,qBAGtGU,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,SAAOG,KAAO,WAAWC,YAAc,WAAWX,MAASE,EAAUH,KAAO,WAAWa,SAAUlC,KAAKiB,qBAG1GU,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,UAAQM,QAASnC,KAAKI,cAAtB,aAGJuB,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,SACK7B,KAAKQ,MAAMiB,kBA1DT/B,aCUZ0C,mLANX,OACET,EAAAC,EAAAC,cAACQ,EAAD,aAHY3C,aCOE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.0caf65f7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass GetData extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        items : [],\r\n        load : false,\r\n        query : \"\",\r\n      }\r\n    }\r\n  \r\n    componentDidMount(){\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(resjson => {\r\n          this.setState({\r\n            load : true,\r\n            items : resjson,\r\n          })\r\n        });\r\n    }\r\n  \r\n    updateQuery(event){\r\n      this.setState({query : event.target.value});\r\n    }\r\n    \r\n    render(){\r\n      var {load, items, query} = this.state;\r\n  \r\n      var filtered = items.filter(\r\n        (item) => {\r\n          return item.name.toLowerCase().indexOf(query.toLowerCase()) !== -1;\r\n        }\r\n      )\r\n  \r\n      if(!load){\r\n        return (\r\n          <div className=\"queryStyle\">\r\n            Loading Data...\r\n          </div>\r\n        );\r\n      }\r\n      else{ \r\n        return (\r\n          <div className=\"titlesec\">\r\n            <h1>NIM Finder</h1>\r\n  \r\n            <div className=\"search\">\r\n              <input type=\"text\" name=\"query\" placeholder=\"Masukkan Nama/NIM\" onChange={this.updateQuery.bind(this)} />\r\n            </div>\r\n  \r\n            <br></br>\r\n  \r\n            <div className=\"queryStyle\">  \r\n              <ol style={{ listStyleType : \"decimal\"}}>\r\n                {filtered.map(item => (\r\n                  <li key={item.id}>\r\n                    {item.name} => {item.username}\r\n                  </li>\r\n                ))};\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default GetData;\r\n  ","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass PostRegister extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username : '',\r\n            password : '',\r\n            message : ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const data = this.state; \r\n        console.log(data);\r\n\r\n        axios.post('https://shrouded-cove-86222.herokuapp.com/https://api.stya.net/nim/register', data)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        const {username, password} = this.state;\r\n        return(\r\n            <div className =\"titlesec\">\r\n                <h2>\r\n                    Register\r\n                </h2>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <p>\r\n                        <input type = 'text' placeholder = 'Username' value = {username} name = 'username' onChange={this.handleInputChange} />\r\n                    </p>\r\n\r\n                    <p>\r\n                        <input type = 'password' placeholder = 'password' value = {password} name = 'password' onChange={this.handleInputChange} />\r\n                    </p>\r\n\r\n                    <p>\r\n                        <button onClick={this.handleSubmit}>Register</button>\r\n                    </p>\r\n\r\n                    <br>\r\n                    </br>\r\n\r\n                    <p>\r\n                        {this.state.message}\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostRegister;","import React, {Component} from 'react';\nimport './App.css';\nimport GetData from './GetData'\nimport PostRegister from './PostRegister'\n\nclass App extends Component {\n  render(){\n    return(\n      <PostRegister />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}